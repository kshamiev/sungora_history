// config Типы глобальной конфигурации приложения.
package config

import (
	"lib/database/mysql"
	"lib/logs"
	"lib/mailer"
	"time"
)

// Воспринимаемые приложением параметры коммандной строки
type CmdArgs struct {
	Mode       string // Режим работы приложения
	ConfigFile string // Явное указание месторасположения и имени конфигурационного файла
}

// Структура конфигурации.
// Возможно расширение конфигурации путем добавления свойств в структуру и секций в конфигурационный файл.
// Расширяемые свойства должны быть строго скалярных типов.
//
// Теги к свойствам:
//     config:"Название секции"` Имя сопоставляемой свойству секции конфигурационного файла
//     config:"-"` системная конфигурация по специальному алгоритму
type Configuration struct {
	Main      Main                     `config:"MAIN"`      // Главная конфигурация
	View      View                     `config:"VIEW"`      // Шаблонизатор и представление
	Logs      logs.Cfglogs             `config:"LOGS"`      // Настройка лог службы
	Auth      Auth                     `config:"AUTH"`      // Настройки авторизации
	Mail      mailer.CfgMailer         `config:"MAIL"`      // Настройки почты
	Memcached Memcached                `config:"MEMCACHED"` // Настройка кеширования
	Update    Update                   `config:"UPDATE"`    // Обновление приложения
	Server    map[int8]*Server         `config:"-"`         // Настройки сервера
	Mysql     map[int8]*mysql.CfgMysql `config:"-"`         // Настройки mysql
}

// Главная конфигурация
type Main struct {
	// Рабочая папка приложения
	WorkDir string
	// Сертификаты SSL
	Keys string
	// Путь и имя PID файла. Если файл не указан то PID не создаётся
	Pid string
	// Расположение загружаемых бинарных данных
	Upload string
	// Временная зона в которой работает приложение в формате (IANA Time Zone database).
	// Если временная зона не указана, то используется UTC
	TimeZone string
	// Временная зона
	TimeLocation *time.Location
	// Используемая ядром БД.
	// 0 - БД не используется
	// 1 - Используется БД mysql
	UseDb int64
	// Префикс языка по умолчанию
	Lang string
	// Отдавать статику напрямую при ее наличии.
	// Если установить 0, то сначала будет произведен поиск ури (роутинг) и только при его отсутсвии будет отдана статика.
	ResponseStatic bool
	// Дата и время сборки
	VersionBuild string
	// Объем используемой оперативной памяти наличие которой нужно проверить
	Memory int
	// Режим работы приложения
	Mode string
	// Месторасположене и имя конфигурационного файла.
	// Пример: /root/myconf.conf
	ConfigFile string
}

// Шаблонизатор и представление.
type View struct {
	// Глобальный путь к папке со статикой
	Path string
	// Шаблоны макетов, контроллеров и иных статичных данных работающих на стороне сервера
	Tpl string
}

// Настройки авторизации
type Auth struct {
	// ID Гостя (группы и пользователя) (минмальный доступ) = 1. Переопределить нельзя.
	DevUID uint64
	// ID Разработчика (группы и пользователя) (маскимальный доступ) = 2. Переопределить нельзя.
	GuestUID uint64
	// Имя cессионной куки (токен)
	TokenCookie string
	// Время в минутах, хранения сессии пользователя при отсутствии его активности в системе.
	// По окончании времени хранения сесии пользователю необходимо будет повторно пройти авторизацию.
	// (по умолчанию 3600)
	SessionTimeout int16
}

// Кеширование
type Memcached struct {
	// Список серверов с указанием порта разделённых запятыми.
	Servers string
	// Переменная разрешает или запрещает использование memcached, значения true, false
	Enable bool
}

// Обновление приложения
type Update struct {
	// Адрес к API сервера обновлений,
	// Если сервер не указан, то режим обновления (Mode='disable') не работает.
	Server string
	// Режим обновления. Поддерживаемые режимы:
	// auto – Автоматическое обновление сразу после обнаружения новой версии
	// idle – Обновление только в том случае если нет ни одного активного пользователя
	// download – Не обновлять приложение, только скачивать новую версию, обновление происходит при следующем запуске приложения
	// disable – Обновление отключено
	Mode string
}

// Конфигурация сервера
type Server struct {
	// Тип сервера
	Type string
	// Режим работы приложения, каким способом приложение слушает запросы. Возможные значения: socket, tcp
	Mode string
	// Адрес занимаемый приложением, можно указывать как доменное имя так и ip адрес
	Host string
	// Порт занимаемый приложение в режиме работы Mode=tcp
	Port int64
	// Unix:Socket занимаемый приложением, применимо только для *nix и mac os x
	Socket string
	// Домены (через запятую) обслуживаемые данным сервером
	Domain string
	// Защита от атак. Время ожидания web запроса в секундах, по истечении которого соединение сбрасывается
	ReadTimeout int64
	// Защита от атак. Время ожидания окончания передачи ответа в секундах, по истечении которого соединение сбрасывается
	WriteTimeout int64
	// Защита от атак. Максимальный размер заголовка получаемого от браузера клиента
	MaxHeaderBytes int64
}
