// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/kshamiev/sungora/pkg/models"
	"github.com/kshamiev/sungora/pkg/typ"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null"
)

type Character interface {
	IsCharacter()
}

type Droid struct {
	ID              string      `json:"id"`
	Name            string      `json:"name"`
	Friends         []Character `json:"friends"`
	AppearsIn       []*Episode  `json:"appearsIn"`
	PrimaryFunction *string     `json:"primaryFunction"`
}

func (Droid) IsCharacter() {}

type Human struct {
	ID           string      `json:"id"`
	Name         string      `json:"name"`
	Friends      []Character `json:"friends"`
	AppearsIn    []*Episode  `json:"appearsIn"`
	Starships    []*Starship `json:"starships"`
	TotalCredits *int        `json:"totalCredits"`
}

func (Human) IsCharacter() {}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type Role struct {
	ID          typ.UUID `json:"id"`
	Code        string   `json:"code"`
	Description string   `json:"description"`
}

type Starship struct {
	ID     string   `json:"id"`
	Name   string   `json:"name"`
	Length *float64 `json:"length"`
}

type Todo struct {
	// идентификатор
	ID typ.UUID `json:"id"`
	// пример целого числа
	Number int `json:"number"`
	// пример дробного числа
	Price float64 `json:"price"`
	// пример дробного числа Decimal
	Decimal decimal.Decimal `json:"decimal"`
	// пример флага Boolean
	Done bool `json:"done"`
	// пример перечисления
	Access Access `json:"access"`
	// пример строки
	Text     string      `json:"text"`
	TextNull null.String `json:"text_null"`
	// пример дата и время
	CreateAt time.Time `json:"create_at"`
	DeleteAt null.Time `json:"delete_at"`
	// пример пользовательского типа - роль пользователя
	Role *Role `json:"role"`
	// пример массива
	Roles []*Role `json:"roles"`
	// пример поля связи
	LinkID typ.UUID `json:"link_id"`
	// поле с параметрами
	TestParam []*models.User `json:"test_param"`
}

type Access string

const (
	AccessAdmin  Access = "ADMIN"
	AccessGuest  Access = "GUEST"
	AccessLogist Access = "LOGIST"
	AccessTk     Access = "TK"
)

var AllAccess = []Access{
	AccessAdmin,
	AccessGuest,
	AccessLogist,
	AccessTk,
}

func (e Access) IsValid() bool {
	switch e {
	case AccessAdmin, AccessGuest, AccessLogist, AccessTk:
		return true
	}
	return false
}

func (e Access) String() string {
	return string(e)
}

func (e *Access) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Access(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Access", str)
	}
	return nil
}

func (e Access) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Episode string

const (
	EpisodeNewhope Episode = "NEWHOPE"
	EpisodeEmpire  Episode = "EMPIRE"
	EpisodeJedi    Episode = "JEDI"
)

var AllEpisode = []Episode{
	EpisodeNewhope,
	EpisodeEmpire,
	EpisodeJedi,
}

func (e Episode) IsValid() bool {
	switch e {
	case EpisodeNewhope, EpisodeEmpire, EpisodeJedi:
		return true
	}
	return false
}

func (e Episode) String() string {
	return string(e)
}

func (e *Episode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Episode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Episode", str)
	}
	return nil
}

func (e Episode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LengthUnit string

const (
	LengthUnitMeter LengthUnit = "METER"
	LengthUnitKm    LengthUnit = "KM"
	LengthUnitMile  LengthUnit = "MILE"
)

var AllLengthUnit = []LengthUnit{
	LengthUnitMeter,
	LengthUnitKm,
	LengthUnitMile,
}

func (e LengthUnit) IsValid() bool {
	switch e {
	case LengthUnitMeter, LengthUnitKm, LengthUnitMile:
		return true
	}
	return false
}

func (e LengthUnit) String() string {
	return string(e)
}

func (e *LengthUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LengthUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LengthUnit", str)
	}
	return nil
}

func (e LengthUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
