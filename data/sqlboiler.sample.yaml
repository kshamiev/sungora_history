psql:
  dbname: "sungora"
  user: "postgres"
  pass: "postgres"
  host: "localhost"
  blacklist: ["test"]

# UUID
types:
  - match:
      name: status
    replace:
      type: typ.Status
    imports:
      third_party:
        - '"github.com/kshamiev/sungora/pb/typ"'
  - match:
      db_type: uuid
      nullable: true
    replace:
      type: typ.UUID
    imports:
      third_party:
        - '"github.com/kshamiev/sungora/pb/typ"'
  - match:
      db_type: uuid
      nullable: false
    replace:
      type: typ.UUID
    imports:
      third_party:
        - '"github.com/kshamiev/sungora/pb/typ"'
  - match:
      db_type: numeric
      nullable: true
    replace:
      type: decimal.NullDecimal
    imports:
      third_party:
        - '"github.com/shopspring/decimal"'
  - match:
      db_type: numeric
      nullable: false
    replace:
      type: decimal.Decimal
    imports:
      third_party:
        - '"github.com/shopspring/decimal"'

#type Column struct {
#	Name      string `json:"name" toml:"name"`
#	Type      string `json:"type" toml:"type"`
#	DBType    string `json:"db_type" toml:"db_type"`
#	Default   string `json:"default" toml:"default"`
#	Nullable  bool   `json:"nullable" toml:"nullable"`
#	Unique    bool   `json:"unique" toml:"unique"`
#	Validated bool   `json:"validated" toml:"validated"`
#
#	// Postgres only extension bits
#	// ArrType is the underlying data type of the Postgres
#	// ARRAY type. See here:
#	// https://www.postgresql.org/docs/9.1/static/infoschema-element-types.html
#	ArrType *string `json:"arr_type" toml:"arr_type"`
#	UDTName string  `json:"udt_name" toml:"udt_name"`
#	// DomainName is the domain type name associated to the column. See here:
#	// https://www.postgresql.org/docs/10/extend-type-system.html#EXTEND-TYPE-SYSTEM-DOMAINS
#	DomainName *string `json:"domain_name" toml:"domain_name"`
#
#	// MySQL only bits
#	// Used to get full type, ex:
#	// tinyint(1) instead of tinyint
#	// Used for "tinyint-as-bool" flag
#	FullDBType string `json:"full_db_type" toml:"full_db_type"`
#
#	// MS SQL only bits
#	// Used to indicate that the value
#	// for this column is auto generated by database on insert (i.e. - timestamp (old) or rowversion (new))
#	AutoGenerated bool `json:"auto_generated" toml:"auto_generated"`
#}

# ENUM
# имя типа = имятаблицы + имя поля
# имя констант для значений таких свойств формируются из имени типа и какждого из значений = тип + значение
#
#  создание типа enum
#  create type users_pol as enum ('woman', 'trans', 'values', 'and', 'new', 'ones');
#  создание колонки созданного типа enum
#  alter table users add pol users_pol not null default 'and';
#
#  добавление нового значение в тип
#  ALTER TYPE users_pol ADD VALUE 'qwerty';
#  ALTER TYPE users_pol ADD VALUE 'new_value' BEFORE 'old_value';
#  ALTER TYPE users_pol ADD VALUE 'new_value' AFTER 'old_value';
#
#  полное значений типа enum
#
#  -- 1. rename the enum type you want to change
#  alter type users_pol rename to _users_pol;
#  -- 2. create new type
#  create type users_pol as enum ('1', '2', '3', 'and', 'new', 'ones');
#  -- 3. rename column(s) which uses our enum type
#  alter table users rename column pol to _pol;
#  -- 4. add new column of new type
#  alter table users add pol users_pol not null default '1';
#  -- 5. copy values to the new column
#  update users set pol = _pol::text::users_pol where CAST(_pol::text::_users_pol AS text) IN ('1', '2', '3', 'and', 'new', 'ones');
#  -- 6. remove old column and type
#  alter table users drop column _pol;
#  drop type _users_pol;
#
#  еще один вариант (работает при условии что нет конфликтов со старыми и новыми значениями)
#
#  -- rename the old enum
#  alter type my_enum rename to my_enum__;
#  -- create the new enum
#  create type my_enum as enum ('value1', 'value2', 'value3');
#
#  -- alter all you enum columns
#  alter table my_table
#  alter column my_column type my_enum using my_column::text::my_enum;
#
#  -- drop the old enum
#  drop type my_enum__;
